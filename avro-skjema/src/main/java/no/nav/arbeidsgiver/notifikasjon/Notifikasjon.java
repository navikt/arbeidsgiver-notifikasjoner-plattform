/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.arbeidsgiver.notifikasjon;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Notifikasjon extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6808401156331713770L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Notifikasjon\",\"namespace\":\"no.nav.arbeidsgiver.notifikasjon\",\"fields\":[{\"name\":\"notifikasjon\",\"type\":[{\"type\":\"record\",\"name\":\"Beskjed\",\"fields\":[{\"name\":\"synligFremTil\",\"type\":[\"null\",\"long\"],\"doc\":\"For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning\",\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"tekst\",\"type\":\"string\",\"doc\":\"Teksten som presenteres til brukeren.\"},{\"name\":\"link\",\"type\":\"string\",\"doc\":\"Linken brukeren kan klikke på for å få mer informasjon om bedskjeden\"}]}]},{\"name\":\"mottaker\",\"type\":{\"type\":\"record\",\"name\":\"Mottaker\",\"fields\":[{\"name\":\"mottaker\",\"type\":[{\"type\":\"record\",\"name\":\"OrgnrFnr\",\"doc\":\"Mottas av dem med gitt fnr i konteksten av et bestemt orgnr\",\"fields\":[{\"name\":\"orgnr\",\"type\":\"string\"},{\"name\":\"fnr\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"OrgnrAltinnservice\",\"doc\":\"Mottas av alle som har tilgang til altinn-tjenesten i det gitte orgnr\",\"fields\":[{\"name\":\"orgnr\",\"type\":\"string\"},{\"name\":\"servicecode\",\"type\":\"string\"},{\"name\":\"serviceedition\",\"type\":\"string\"}]}]}]},\"doc\":\"Hvem som skal se beskjeden\"},{\"name\":\"grupperingsId\",\"type\":\"string\",\"doc\":\"Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.\"},{\"name\":\"tidspunkt\",\"type\":\"long\",\"doc\":\"Tidspunkt for når hendelsen skjedde\",\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Notifikasjon> ENCODER =
      new BinaryMessageEncoder<Notifikasjon>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Notifikasjon> DECODER =
      new BinaryMessageDecoder<Notifikasjon>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Notifikasjon> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Notifikasjon> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Notifikasjon> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Notifikasjon>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Notifikasjon to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Notifikasjon from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Notifikasjon instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Notifikasjon fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Object notifikasjon;
  /** Hvem som skal se beskjeden */
   private no.nav.arbeidsgiver.notifikasjon.Mottaker mottaker;
  /** Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad. */
   private java.lang.CharSequence grupperingsId;
  /** Tidspunkt for når hendelsen skjedde */
   private long tidspunkt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Notifikasjon() {}

  /**
   * All-args constructor.
   * @param notifikasjon The new value for notifikasjon
   * @param mottaker Hvem som skal se beskjeden
   * @param grupperingsId Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
   * @param tidspunkt Tidspunkt for når hendelsen skjedde
   */
  public Notifikasjon(java.lang.Object notifikasjon, no.nav.arbeidsgiver.notifikasjon.Mottaker mottaker, java.lang.CharSequence grupperingsId, java.lang.Long tidspunkt) {
    this.notifikasjon = notifikasjon;
    this.mottaker = mottaker;
    this.grupperingsId = grupperingsId;
    this.tidspunkt = tidspunkt;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return notifikasjon;
    case 1: return mottaker;
    case 2: return grupperingsId;
    case 3: return tidspunkt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: notifikasjon = value$; break;
    case 1: mottaker = (no.nav.arbeidsgiver.notifikasjon.Mottaker)value$; break;
    case 2: grupperingsId = (java.lang.CharSequence)value$; break;
    case 3: tidspunkt = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'notifikasjon' field.
   * @return The value of the 'notifikasjon' field.
   */
  public java.lang.Object getNotifikasjon() {
    return notifikasjon;
  }


  /**
   * Sets the value of the 'notifikasjon' field.
   * @param value the value to set.
   */
  public void setNotifikasjon(java.lang.Object value) {
    this.notifikasjon = value;
  }

  /**
   * Gets the value of the 'mottaker' field.
   * @return Hvem som skal se beskjeden
   */
  public no.nav.arbeidsgiver.notifikasjon.Mottaker getMottaker() {
    return mottaker;
  }


  /**
   * Sets the value of the 'mottaker' field.
   * Hvem som skal se beskjeden
   * @param value the value to set.
   */
  public void setMottaker(no.nav.arbeidsgiver.notifikasjon.Mottaker value) {
    this.mottaker = value;
  }

  /**
   * Gets the value of the 'grupperingsId' field.
   * @return Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
   */
  public java.lang.CharSequence getGrupperingsId() {
    return grupperingsId;
  }


  /**
   * Sets the value of the 'grupperingsId' field.
   * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
   * @param value the value to set.
   */
  public void setGrupperingsId(java.lang.CharSequence value) {
    this.grupperingsId = value;
  }

  /**
   * Gets the value of the 'tidspunkt' field.
   * @return Tidspunkt for når hendelsen skjedde
   */
  public long getTidspunkt() {
    return tidspunkt;
  }


  /**
   * Sets the value of the 'tidspunkt' field.
   * Tidspunkt for når hendelsen skjedde
   * @param value the value to set.
   */
  public void setTidspunkt(long value) {
    this.tidspunkt = value;
  }

  /**
   * Creates a new Notifikasjon RecordBuilder.
   * @return A new Notifikasjon RecordBuilder
   */
  public static no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder newBuilder() {
    return new no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder();
  }

  /**
   * Creates a new Notifikasjon RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Notifikasjon RecordBuilder
   */
  public static no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder newBuilder(no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder other) {
    if (other == null) {
      return new no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder();
    } else {
      return new no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder(other);
    }
  }

  /**
   * Creates a new Notifikasjon RecordBuilder by copying an existing Notifikasjon instance.
   * @param other The existing instance to copy.
   * @return A new Notifikasjon RecordBuilder
   */
  public static no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder newBuilder(no.nav.arbeidsgiver.notifikasjon.Notifikasjon other) {
    if (other == null) {
      return new no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder();
    } else {
      return new no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder(other);
    }
  }

  /**
   * RecordBuilder for Notifikasjon instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Notifikasjon>
    implements org.apache.avro.data.RecordBuilder<Notifikasjon> {

    private java.lang.Object notifikasjon;
    /** Hvem som skal se beskjeden */
    private no.nav.arbeidsgiver.notifikasjon.Mottaker mottaker;
    private no.nav.arbeidsgiver.notifikasjon.Mottaker.Builder mottakerBuilder;
    /** Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad. */
    private java.lang.CharSequence grupperingsId;
    /** Tidspunkt for når hendelsen skjedde */
    private long tidspunkt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.notifikasjon)) {
        this.notifikasjon = data().deepCopy(fields()[0].schema(), other.notifikasjon);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mottaker)) {
        this.mottaker = data().deepCopy(fields()[1].schema(), other.mottaker);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasMottakerBuilder()) {
        this.mottakerBuilder = no.nav.arbeidsgiver.notifikasjon.Mottaker.newBuilder(other.getMottakerBuilder());
      }
      if (isValidValue(fields()[2], other.grupperingsId)) {
        this.grupperingsId = data().deepCopy(fields()[2].schema(), other.grupperingsId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tidspunkt)) {
        this.tidspunkt = data().deepCopy(fields()[3].schema(), other.tidspunkt);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Notifikasjon instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.arbeidsgiver.notifikasjon.Notifikasjon other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.notifikasjon)) {
        this.notifikasjon = data().deepCopy(fields()[0].schema(), other.notifikasjon);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mottaker)) {
        this.mottaker = data().deepCopy(fields()[1].schema(), other.mottaker);
        fieldSetFlags()[1] = true;
      }
      this.mottakerBuilder = null;
      if (isValidValue(fields()[2], other.grupperingsId)) {
        this.grupperingsId = data().deepCopy(fields()[2].schema(), other.grupperingsId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tidspunkt)) {
        this.tidspunkt = data().deepCopy(fields()[3].schema(), other.tidspunkt);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'notifikasjon' field.
      * @return The value.
      */
    public java.lang.Object getNotifikasjon() {
      return notifikasjon;
    }


    /**
      * Sets the value of the 'notifikasjon' field.
      * @param value The value of 'notifikasjon'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder setNotifikasjon(java.lang.Object value) {
      validate(fields()[0], value);
      this.notifikasjon = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'notifikasjon' field has been set.
      * @return True if the 'notifikasjon' field has been set, false otherwise.
      */
    public boolean hasNotifikasjon() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'notifikasjon' field.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder clearNotifikasjon() {
      notifikasjon = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mottaker' field.
      * Hvem som skal se beskjeden
      * @return The value.
      */
    public no.nav.arbeidsgiver.notifikasjon.Mottaker getMottaker() {
      return mottaker;
    }


    /**
      * Sets the value of the 'mottaker' field.
      * Hvem som skal se beskjeden
      * @param value The value of 'mottaker'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder setMottaker(no.nav.arbeidsgiver.notifikasjon.Mottaker value) {
      validate(fields()[1], value);
      this.mottakerBuilder = null;
      this.mottaker = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mottaker' field has been set.
      * Hvem som skal se beskjeden
      * @return True if the 'mottaker' field has been set, false otherwise.
      */
    public boolean hasMottaker() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'mottaker' field and creates one if it doesn't exist yet.
     * Hvem som skal se beskjeden
     * @return This builder.
     */
    public no.nav.arbeidsgiver.notifikasjon.Mottaker.Builder getMottakerBuilder() {
      if (mottakerBuilder == null) {
        if (hasMottaker()) {
          setMottakerBuilder(no.nav.arbeidsgiver.notifikasjon.Mottaker.newBuilder(mottaker));
        } else {
          setMottakerBuilder(no.nav.arbeidsgiver.notifikasjon.Mottaker.newBuilder());
        }
      }
      return mottakerBuilder;
    }

    /**
     * Sets the Builder instance for the 'mottaker' field
     * Hvem som skal se beskjeden
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder setMottakerBuilder(no.nav.arbeidsgiver.notifikasjon.Mottaker.Builder value) {
      clearMottaker();
      mottakerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mottaker' field has an active Builder instance
     * Hvem som skal se beskjeden
     * @return True if the 'mottaker' field has an active Builder instance
     */
    public boolean hasMottakerBuilder() {
      return mottakerBuilder != null;
    }

    /**
      * Clears the value of the 'mottaker' field.
      * Hvem som skal se beskjeden
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder clearMottaker() {
      mottaker = null;
      mottakerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'grupperingsId' field.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @return The value.
      */
    public java.lang.CharSequence getGrupperingsId() {
      return grupperingsId;
    }


    /**
      * Sets the value of the 'grupperingsId' field.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @param value The value of 'grupperingsId'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder setGrupperingsId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.grupperingsId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'grupperingsId' field has been set.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @return True if the 'grupperingsId' field has been set, false otherwise.
      */
    public boolean hasGrupperingsId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'grupperingsId' field.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder clearGrupperingsId() {
      grupperingsId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tidspunkt' field.
      * Tidspunkt for når hendelsen skjedde
      * @return The value.
      */
    public long getTidspunkt() {
      return tidspunkt;
    }


    /**
      * Sets the value of the 'tidspunkt' field.
      * Tidspunkt for når hendelsen skjedde
      * @param value The value of 'tidspunkt'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder setTidspunkt(long value) {
      validate(fields()[3], value);
      this.tidspunkt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tidspunkt' field has been set.
      * Tidspunkt for når hendelsen skjedde
      * @return True if the 'tidspunkt' field has been set, false otherwise.
      */
    public boolean hasTidspunkt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tidspunkt' field.
      * Tidspunkt for når hendelsen skjedde
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Notifikasjon.Builder clearTidspunkt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Notifikasjon build() {
      try {
        Notifikasjon record = new Notifikasjon();
        record.notifikasjon = fieldSetFlags()[0] ? this.notifikasjon :  defaultValue(fields()[0]);
        if (mottakerBuilder != null) {
          try {
            record.mottaker = this.mottakerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("mottaker"));
            throw e;
          }
        } else {
          record.mottaker = fieldSetFlags()[1] ? this.mottaker : (no.nav.arbeidsgiver.notifikasjon.Mottaker) defaultValue(fields()[1]);
        }
        record.grupperingsId = fieldSetFlags()[2] ? this.grupperingsId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tidspunkt = fieldSetFlags()[3] ? this.tidspunkt : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Notifikasjon>
    WRITER$ = (org.apache.avro.io.DatumWriter<Notifikasjon>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Notifikasjon>
    READER$ = (org.apache.avro.io.DatumReader<Notifikasjon>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










