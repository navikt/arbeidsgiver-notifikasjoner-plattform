/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.arbeidsgiver.notifikasjon;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Beskjed extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7724253493311123946L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Beskjed\",\"namespace\":\"no.nav.arbeidsgiver.notifikasjon\",\"fields\":[{\"name\":\"tidspunkt\",\"type\":\"long\",\"doc\":\"Tidspunkt for når hendelsen skjedde\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"synligFremTil\",\"type\":[\"null\",\"long\"],\"doc\":\"For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning\",\"default\":null,\"logicalType\":\"timestamp-millis\"},{\"name\":\"mottaker\",\"type\":{\"type\":\"record\",\"name\":\"Mottaker\",\"fields\":[{\"name\":\"mottaker\",\"type\":[{\"type\":\"record\",\"name\":\"OrgnrFnr\",\"doc\":\"Mottas av dem med gitt fnr i konteksten av et bestemt orgnr\",\"fields\":[{\"name\":\"orgnr\",\"type\":\"string\"},{\"name\":\"fnr\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"OrgnrAltinnservice\",\"doc\":\"Mottas av alle som har tilgang til altinn-tjenesten i det gitte orgnr\",\"fields\":[{\"name\":\"orgnr\",\"type\":\"string\"},{\"name\":\"servicecode\",\"type\":\"string\"},{\"name\":\"serviceedition\",\"type\":\"string\"}]}]}]},\"doc\":\"Hvem som skal se beskjeden\"},{\"name\":\"grupperingsId\",\"type\":\"string\",\"doc\":\"Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.\"},{\"name\":\"tekst\",\"type\":\"string\",\"doc\":\"Teksten som presenteres til brukeren.\"},{\"name\":\"link\",\"type\":\"string\",\"doc\":\"Linken brukeren kan klikke på for å få mer informasjon om bedskjeden\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Beskjed> ENCODER =
      new BinaryMessageEncoder<Beskjed>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Beskjed> DECODER =
      new BinaryMessageDecoder<Beskjed>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Beskjed> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Beskjed> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Beskjed> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Beskjed>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Beskjed to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Beskjed from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Beskjed instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Beskjed fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Tidspunkt for når hendelsen skjedde */
   private long tidspunkt;
  /** For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning */
   private java.lang.Long synligFremTil;
  /** Hvem som skal se beskjeden */
   private no.nav.arbeidsgiver.notifikasjon.Mottaker mottaker;
  /** Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad. */
   private java.lang.CharSequence grupperingsId;
  /** Teksten som presenteres til brukeren. */
   private java.lang.CharSequence tekst;
  /** Linken brukeren kan klikke på for å få mer informasjon om bedskjeden */
   private java.lang.CharSequence link;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Beskjed() {}

  /**
   * All-args constructor.
   * @param tidspunkt Tidspunkt for når hendelsen skjedde
   * @param synligFremTil For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning
   * @param mottaker Hvem som skal se beskjeden
   * @param grupperingsId Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
   * @param tekst Teksten som presenteres til brukeren.
   * @param link Linken brukeren kan klikke på for å få mer informasjon om bedskjeden
   */
  public Beskjed(java.lang.Long tidspunkt, java.lang.Long synligFremTil, no.nav.arbeidsgiver.notifikasjon.Mottaker mottaker, java.lang.CharSequence grupperingsId, java.lang.CharSequence tekst, java.lang.CharSequence link) {
    this.tidspunkt = tidspunkt;
    this.synligFremTil = synligFremTil;
    this.mottaker = mottaker;
    this.grupperingsId = grupperingsId;
    this.tekst = tekst;
    this.link = link;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tidspunkt;
    case 1: return synligFremTil;
    case 2: return mottaker;
    case 3: return grupperingsId;
    case 4: return tekst;
    case 5: return link;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tidspunkt = (java.lang.Long)value$; break;
    case 1: synligFremTil = (java.lang.Long)value$; break;
    case 2: mottaker = (no.nav.arbeidsgiver.notifikasjon.Mottaker)value$; break;
    case 3: grupperingsId = (java.lang.CharSequence)value$; break;
    case 4: tekst = (java.lang.CharSequence)value$; break;
    case 5: link = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tidspunkt' field.
   * @return Tidspunkt for når hendelsen skjedde
   */
  public long getTidspunkt() {
    return tidspunkt;
  }


  /**
   * Sets the value of the 'tidspunkt' field.
   * Tidspunkt for når hendelsen skjedde
   * @param value the value to set.
   */
  public void setTidspunkt(long value) {
    this.tidspunkt = value;
  }

  /**
   * Gets the value of the 'synligFremTil' field.
   * @return For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning
   */
  public java.lang.Long getSynligFremTil() {
    return synligFremTil;
  }


  /**
   * Sets the value of the 'synligFremTil' field.
   * For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning
   * @param value the value to set.
   */
  public void setSynligFremTil(java.lang.Long value) {
    this.synligFremTil = value;
  }

  /**
   * Gets the value of the 'mottaker' field.
   * @return Hvem som skal se beskjeden
   */
  public no.nav.arbeidsgiver.notifikasjon.Mottaker getMottaker() {
    return mottaker;
  }


  /**
   * Sets the value of the 'mottaker' field.
   * Hvem som skal se beskjeden
   * @param value the value to set.
   */
  public void setMottaker(no.nav.arbeidsgiver.notifikasjon.Mottaker value) {
    this.mottaker = value;
  }

  /**
   * Gets the value of the 'grupperingsId' field.
   * @return Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
   */
  public java.lang.CharSequence getGrupperingsId() {
    return grupperingsId;
  }


  /**
   * Sets the value of the 'grupperingsId' field.
   * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
   * @param value the value to set.
   */
  public void setGrupperingsId(java.lang.CharSequence value) {
    this.grupperingsId = value;
  }

  /**
   * Gets the value of the 'tekst' field.
   * @return Teksten som presenteres til brukeren.
   */
  public java.lang.CharSequence getTekst() {
    return tekst;
  }


  /**
   * Sets the value of the 'tekst' field.
   * Teksten som presenteres til brukeren.
   * @param value the value to set.
   */
  public void setTekst(java.lang.CharSequence value) {
    this.tekst = value;
  }

  /**
   * Gets the value of the 'link' field.
   * @return Linken brukeren kan klikke på for å få mer informasjon om bedskjeden
   */
  public java.lang.CharSequence getLink() {
    return link;
  }


  /**
   * Sets the value of the 'link' field.
   * Linken brukeren kan klikke på for å få mer informasjon om bedskjeden
   * @param value the value to set.
   */
  public void setLink(java.lang.CharSequence value) {
    this.link = value;
  }

  /**
   * Creates a new Beskjed RecordBuilder.
   * @return A new Beskjed RecordBuilder
   */
  public static no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder newBuilder() {
    return new no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder();
  }

  /**
   * Creates a new Beskjed RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Beskjed RecordBuilder
   */
  public static no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder newBuilder(no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder other) {
    if (other == null) {
      return new no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder();
    } else {
      return new no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder(other);
    }
  }

  /**
   * Creates a new Beskjed RecordBuilder by copying an existing Beskjed instance.
   * @param other The existing instance to copy.
   * @return A new Beskjed RecordBuilder
   */
  public static no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder newBuilder(no.nav.arbeidsgiver.notifikasjon.Beskjed other) {
    if (other == null) {
      return new no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder();
    } else {
      return new no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder(other);
    }
  }

  /**
   * RecordBuilder for Beskjed instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Beskjed>
    implements org.apache.avro.data.RecordBuilder<Beskjed> {

    /** Tidspunkt for når hendelsen skjedde */
    private long tidspunkt;
    /** For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning */
    private java.lang.Long synligFremTil;
    /** Hvem som skal se beskjeden */
    private no.nav.arbeidsgiver.notifikasjon.Mottaker mottaker;
    private no.nav.arbeidsgiver.notifikasjon.Mottaker.Builder mottakerBuilder;
    /** Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad. */
    private java.lang.CharSequence grupperingsId;
    /** Teksten som presenteres til brukeren. */
    private java.lang.CharSequence tekst;
    /** Linken brukeren kan klikke på for å få mer informasjon om bedskjeden */
    private java.lang.CharSequence link;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tidspunkt)) {
        this.tidspunkt = data().deepCopy(fields()[0].schema(), other.tidspunkt);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.synligFremTil)) {
        this.synligFremTil = data().deepCopy(fields()[1].schema(), other.synligFremTil);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mottaker)) {
        this.mottaker = data().deepCopy(fields()[2].schema(), other.mottaker);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasMottakerBuilder()) {
        this.mottakerBuilder = no.nav.arbeidsgiver.notifikasjon.Mottaker.newBuilder(other.getMottakerBuilder());
      }
      if (isValidValue(fields()[3], other.grupperingsId)) {
        this.grupperingsId = data().deepCopy(fields()[3].schema(), other.grupperingsId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.tekst)) {
        this.tekst = data().deepCopy(fields()[4].schema(), other.tekst);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.link)) {
        this.link = data().deepCopy(fields()[5].schema(), other.link);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Beskjed instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.arbeidsgiver.notifikasjon.Beskjed other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.tidspunkt)) {
        this.tidspunkt = data().deepCopy(fields()[0].schema(), other.tidspunkt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.synligFremTil)) {
        this.synligFremTil = data().deepCopy(fields()[1].schema(), other.synligFremTil);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mottaker)) {
        this.mottaker = data().deepCopy(fields()[2].schema(), other.mottaker);
        fieldSetFlags()[2] = true;
      }
      this.mottakerBuilder = null;
      if (isValidValue(fields()[3], other.grupperingsId)) {
        this.grupperingsId = data().deepCopy(fields()[3].schema(), other.grupperingsId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tekst)) {
        this.tekst = data().deepCopy(fields()[4].schema(), other.tekst);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.link)) {
        this.link = data().deepCopy(fields()[5].schema(), other.link);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'tidspunkt' field.
      * Tidspunkt for når hendelsen skjedde
      * @return The value.
      */
    public long getTidspunkt() {
      return tidspunkt;
    }


    /**
      * Sets the value of the 'tidspunkt' field.
      * Tidspunkt for når hendelsen skjedde
      * @param value The value of 'tidspunkt'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder setTidspunkt(long value) {
      validate(fields()[0], value);
      this.tidspunkt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tidspunkt' field has been set.
      * Tidspunkt for når hendelsen skjedde
      * @return True if the 'tidspunkt' field has been set, false otherwise.
      */
    public boolean hasTidspunkt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tidspunkt' field.
      * Tidspunkt for når hendelsen skjedde
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder clearTidspunkt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'synligFremTil' field.
      * For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning
      * @return The value.
      */
    public java.lang.Long getSynligFremTil() {
      return synligFremTil;
    }


    /**
      * Sets the value of the 'synligFremTil' field.
      * For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning
      * @param value The value of 'synligFremTil'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder setSynligFremTil(java.lang.Long value) {
      validate(fields()[1], value);
      this.synligFremTil = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'synligFremTil' field has been set.
      * For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning
      * @return True if the 'synligFremTil' field has been set, false otherwise.
      */
    public boolean hasSynligFremTil() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'synligFremTil' field.
      * For hvor lenge beskjeden skal vises. Er den null, så er det ingen begrensning
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder clearSynligFremTil() {
      synligFremTil = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mottaker' field.
      * Hvem som skal se beskjeden
      * @return The value.
      */
    public no.nav.arbeidsgiver.notifikasjon.Mottaker getMottaker() {
      return mottaker;
    }


    /**
      * Sets the value of the 'mottaker' field.
      * Hvem som skal se beskjeden
      * @param value The value of 'mottaker'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder setMottaker(no.nav.arbeidsgiver.notifikasjon.Mottaker value) {
      validate(fields()[2], value);
      this.mottakerBuilder = null;
      this.mottaker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mottaker' field has been set.
      * Hvem som skal se beskjeden
      * @return True if the 'mottaker' field has been set, false otherwise.
      */
    public boolean hasMottaker() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'mottaker' field and creates one if it doesn't exist yet.
     * Hvem som skal se beskjeden
     * @return This builder.
     */
    public no.nav.arbeidsgiver.notifikasjon.Mottaker.Builder getMottakerBuilder() {
      if (mottakerBuilder == null) {
        if (hasMottaker()) {
          setMottakerBuilder(no.nav.arbeidsgiver.notifikasjon.Mottaker.newBuilder(mottaker));
        } else {
          setMottakerBuilder(no.nav.arbeidsgiver.notifikasjon.Mottaker.newBuilder());
        }
      }
      return mottakerBuilder;
    }

    /**
     * Sets the Builder instance for the 'mottaker' field
     * Hvem som skal se beskjeden
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder setMottakerBuilder(no.nav.arbeidsgiver.notifikasjon.Mottaker.Builder value) {
      clearMottaker();
      mottakerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mottaker' field has an active Builder instance
     * Hvem som skal se beskjeden
     * @return True if the 'mottaker' field has an active Builder instance
     */
    public boolean hasMottakerBuilder() {
      return mottakerBuilder != null;
    }

    /**
      * Clears the value of the 'mottaker' field.
      * Hvem som skal se beskjeden
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder clearMottaker() {
      mottaker = null;
      mottakerBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'grupperingsId' field.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @return The value.
      */
    public java.lang.CharSequence getGrupperingsId() {
      return grupperingsId;
    }


    /**
      * Sets the value of the 'grupperingsId' field.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @param value The value of 'grupperingsId'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder setGrupperingsId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.grupperingsId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'grupperingsId' field has been set.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @return True if the 'grupperingsId' field has been set, false otherwise.
      */
    public boolean hasGrupperingsId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'grupperingsId' field.
      * Id gitt av produsent av meldingen, som viser tilhørighet mellom notifikasjoner. F.eks. at de omhandler samme søknad.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder clearGrupperingsId() {
      grupperingsId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tekst' field.
      * Teksten som presenteres til brukeren.
      * @return The value.
      */
    public java.lang.CharSequence getTekst() {
      return tekst;
    }


    /**
      * Sets the value of the 'tekst' field.
      * Teksten som presenteres til brukeren.
      * @param value The value of 'tekst'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder setTekst(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.tekst = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tekst' field has been set.
      * Teksten som presenteres til brukeren.
      * @return True if the 'tekst' field has been set, false otherwise.
      */
    public boolean hasTekst() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tekst' field.
      * Teksten som presenteres til brukeren.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder clearTekst() {
      tekst = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'link' field.
      * Linken brukeren kan klikke på for å få mer informasjon om bedskjeden
      * @return The value.
      */
    public java.lang.CharSequence getLink() {
      return link;
    }


    /**
      * Sets the value of the 'link' field.
      * Linken brukeren kan klikke på for å få mer informasjon om bedskjeden
      * @param value The value of 'link'.
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder setLink(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.link = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'link' field has been set.
      * Linken brukeren kan klikke på for å få mer informasjon om bedskjeden
      * @return True if the 'link' field has been set, false otherwise.
      */
    public boolean hasLink() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'link' field.
      * Linken brukeren kan klikke på for å få mer informasjon om bedskjeden
      * @return This builder.
      */
    public no.nav.arbeidsgiver.notifikasjon.Beskjed.Builder clearLink() {
      link = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Beskjed build() {
      try {
        Beskjed record = new Beskjed();
        record.tidspunkt = fieldSetFlags()[0] ? this.tidspunkt : (java.lang.Long) defaultValue(fields()[0]);
        record.synligFremTil = fieldSetFlags()[1] ? this.synligFremTil : (java.lang.Long) defaultValue(fields()[1]);
        if (mottakerBuilder != null) {
          try {
            record.mottaker = this.mottakerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("mottaker"));
            throw e;
          }
        } else {
          record.mottaker = fieldSetFlags()[2] ? this.mottaker : (no.nav.arbeidsgiver.notifikasjon.Mottaker) defaultValue(fields()[2]);
        }
        record.grupperingsId = fieldSetFlags()[3] ? this.grupperingsId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.tekst = fieldSetFlags()[4] ? this.tekst : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.link = fieldSetFlags()[5] ? this.link : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Beskjed>
    WRITER$ = (org.apache.avro.io.DatumWriter<Beskjed>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Beskjed>
    READER$ = (org.apache.avro.io.DatumReader<Beskjed>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










